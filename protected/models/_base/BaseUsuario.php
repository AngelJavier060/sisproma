<?php

/**
 * This is the model base class for the table "usuario".
 * DO NOT MODIFY THIS FILE! It is automatically generated by AweCrud.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Usuario".
 *
 * Columns in table "usuario" available as properties of the model,
 * and there are no model relations.
 *
 * @property string $id
 * @property string $username
 * @property string $password
 * @property string $tipo
 * @property string $nombre_completo
 * @property string $direccion
 * @property string $telefono
 * @property integer $estado
 * @property integer $id_referencia
 *
 */
abstract class BaseUsuario extends AweActiveRecord {
 /*Funciones para determinar si es administrador*/
     public function esAdministrador() {
        if ($this->tipo == 'Administrador') /*and $this->estado == '1')           */
        {    return true;}
        else
        {
        return false;
        }
        }
      /*Funciones para no permitir a nadie*/
     public function esNadie() {
        if ($this->tipo == 'Nadie')           
        {    return true;}
        else
        {
        return false;
        }
        }
          
     /* FUNCION PARA LOGUEAR DESDE LA BD */
    public function validatePassword($password) {
         Yii::app()->getSession()->add('tipo_usu_sisproma', $this->tipo); //Aumentado para asignar el tipo al usuario session
        Yii::app()->getSession()->add('id_usu_sisproma', $this->id); //pk del usuario
        Yii::app()->getSession()->add('nombre_usuario_sisproma', $this->nombre_completo); //nombre del usuario
         return $this->hashPassword($password) === $this->password;        
    }
    public function hashPassword($password) {
        return md5($password);
    }

    /*     * FUNCIONES POR DEFECTO

     */
    public static function model($className=__CLASS__) {
        return parent::model($className);
    }

    public function tableName() {
        return 'usuario';
    }

    public static function representingColumn() {
        return 'username';
    }

    public function rules() {
        return array(
            array('username, password, tipo', 'required'),
            array('estado, id_referencia', 'numerical', 'integerOnly'=>true),
            array('username', 'length', 'max'=>50),
            array('password, direccion', 'length', 'max'=>100),
            array('tipo', 'length', 'max'=>20),
            array('nombre_completo, telefono', 'length', 'max'=>30),
            array('nombre_completo, direccion, telefono, estado, id_referencia', 'default', 'setOnEmpty' => true, 'value' => null),
            array('id, username, password, tipo, nombre_completo, direccion, telefono, estado, id_referencia', 'safe', 'on'=>'search'),
        );
    }

    public function relations() {
        return array(
        );
    }

    /**
     * @return array customized attribute labels (name=>label)
     */
    public function attributeLabels() {
        return array(
                'id' => Yii::t('app', 'ID'),
                'username' => Yii::t('app', 'Username'),
                'password' => Yii::t('app', 'Password'),
                'tipo' => Yii::t('app', 'Tipo'),
                'nombre_completo' => Yii::t('app', 'Nombre Completo'),
                'direccion' => Yii::t('app', 'Direccion'),
                'telefono' => Yii::t('app', 'Telefono'),
                'estado' => Yii::t('app', 'Estado'),
                'id_referencia' => Yii::t('app', 'Id Referencia'),
        );
    }

    public function search() {
        $criteria = new CDbCriteria;

        $criteria->compare('id', $this->id, true);
        $criteria->compare('username', $this->username, true);
        $criteria->compare('password', $this->password, true);
        $criteria->compare('tipo', $this->tipo, true);
        $criteria->compare('nombre_completo', $this->nombre_completo, true);
        $criteria->compare('direccion', $this->direccion, true);
        $criteria->compare('telefono', $this->telefono, true);
        $criteria->compare('estado', $this->estado);
        $criteria->compare('id_referencia', $this->id_referencia);

        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
        ));
    }

    public function behaviors() {
        return array_merge(array(
        ), parent::behaviors());
    }
}